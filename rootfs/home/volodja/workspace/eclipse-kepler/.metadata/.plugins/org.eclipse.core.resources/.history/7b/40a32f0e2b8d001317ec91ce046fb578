/*
 * main.cpp
 *
 *  Created on: 30.01.2014
 *      Author: volodja
 */


#include <string>
#include <iostream>
#include <boost/graph/undirected_graph.hpp>
#include <boost/graph/directed_graph.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>
#include <boost/graph/graphviz.hpp>
#include <boost/graph/topological_sort.hpp>
#include <boost/foreach.hpp>


using namespace std;


class ClassA {

};


int main() {
    typedef boost::directed_graph<string, int, string> graph_t;


    graph_t                     graph("graph_name");
    graph_t::vertex_descriptor  v[7];


    v[0] = graph.add_vertex("0 забрать детей из школы");
    v[1] = graph.add_vertex("1 купить продукты");
    v[2] = graph.add_vertex("2 получить деньги в банкомате");
    v[3] = graph.add_vertex("3 привести детей на тренировку");
    v[4] = graph.add_vertex("4 приготовить ужин");
    v[5] = graph.add_vertex("5 забрать детей с тренировки");
    v[6] = graph.add_vertex("6 съесть ужин");


    graph.add_edge(v[2], v[1]);
    graph.add_edge(v[0], v[3]);
    graph.add_edge(v[1], v[3]);
    graph.add_edge(v[1], v[4]);
    graph.add_edge(v[3], v[5]);
    graph.add_edge(v[5], v[6]);
    graph.add_edge(v[4], v[6]);


    cout << "graph name: '" << boost::get_property(graph) << "'" << endl;

//    pair<graph_t::edge_iterator, graph_t::edge_iterator> e = boost::edges(graph);
//    for(graph_t::edge_iterator i = e.first; i != e.second; i++) {
//    }

    pair<graph_t::vertex_iterator, graph_t::vertex_iterator> vertices = boost::vertices(graph);
    for(graph_t::vertex_iterator i = vertices.first; i != vertices.second; i++) {
    	cout << boost::get_vertex_index(*i, graph) << endl;
//    	boost::get(graph, i);
//    	string p = boost::get(graph, *i);
//    	cout << boost::get(graph, i) << endl;
    }

//    boost::write_graphviz(cout, graph);

//    boost::topological_sort

//    std::pair<graph_t::vertex_descriptor, graph_t::vertex_descriptor> e = boost::edges(&graph);



//    BOOST_FOREACH(graph_t::vertex_descriptor vertex, graph) {
//
//    }

//    graph_t::vertex_descriptor a = g.add_vertex("vertex_A");
//    graph_t::vertex_descriptor b = g.add_vertex("vertex_B");
//    graph_t::vertex_descriptor c = g.add_vertex("vertex_C");
//    graph_t::vertex_descriptor d = g.add_vertex("vertex_D");


//    g.add_edge(g[2], g[1], 1);

//    cout << "graph nodes: " << endl;

//    cout << "'" << boost::source(&a, &g) << "'" << endl;

    return 0;
}
