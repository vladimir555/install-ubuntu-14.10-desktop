/*
 * tcp_service.cpp
 *
 *  Created on: 24 марта 2014 г.
 *      Author: volodja
 */





#include "tcp_service.h"


namespace server {
namespace implementation {


TCPService::TCPService(const TCPAddress &listening_address)
:
    listen_address(listening_address),
    socket(service)
{}


TCPService::~TCPService() {
}


void TCPService::initialize() {
    Address     address     (Address::from_string(listen_address.getHost()));
    EndPoint    end_point   (address, listen_address.getPort());
    acceptor    (service, end_point);

    cout << "initialize tcp service, listen address: " << listen_address.getHost() << ":" << listen_address.getPort() << endl;
    //acceptor.async_accept(socket, handleAccept);
    //acceptor.async_accept(socket, bind(handleAccept, this, socket, boost::asio::placeholders::error));
    acceptor.async_accept(socket, bind(&TCPService::handleAccept, this, _1));

    service.run();
}


void TCPService::finalize() {
    cout << "finalize tcp service" << endl;
}


void TCPService::startAccept() {
}


void TCPService::handleAccept(const Error &error) {
    cout << "handleAccept" << endl;
    if (error) {
        cerr << "asio handle accept error: " << error.message() << endl;
    } else {
        vector<unsigned char> buffer(8);
        socket.read_some(boost::asio::buffer(buffer.data(), buffer.size()));
        cout << "read: " << string().assign(buffer.begin(), buffer.end()) << endl;
    }
    acceptor.async_accept(socket, bind(&TCPService::handleAccept, this, _1));
}


} /* namespace implementation */
} /* namespace server */
